#!/usr/bin/env python3
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢ –° –ì–†–ê–§–ò–ö–ê–ú–ò
–°–æ–∑–¥–∞—ë—Ç Excel —Ñ–∞–π–ª —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ PNG –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import re
from datetime import datetime
from PIL import Image
import openpyxl
from openpyxl.drawing.image import Image as ExcelImage
from openpyxl.styles import Font, Alignment, PatternFill
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

def create_summary_chart(report_dir):
    """–°–æ–∑–¥–∞—ë—Ç —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ—Ç—á—ë—Ç–∞"""
    print("üìä –°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ—Ç—á—ë—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_26sep, df_5oct = load_data_by_date()
    df_26sep = clean_salary_data(df_26sep, "26 —Å–µ–Ω—Ç—è–±—Ä—è")
    df_5oct = clean_salary_data(df_5oct, "5 –æ–∫—Ç—è–±—Ä—è")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_26sep = get_stats(df_26sep, "26 —Å–µ–Ω—Ç—è–±—Ä—è")
    stats_5oct = get_stats(df_5oct, "5 –æ–∫—Ç—è–±—Ä—è")
    
    # –°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
    dates = ['26 —Å–µ–Ω—Ç—è–±—Ä—è\n(24-26.09)', '5 –æ–∫—Ç—è–±—Ä—è\n(3-5.10)']
    values = [stats_26sep['with_salary'], stats_5oct['with_salary']]
    bars1 = ax1.bar(dates, values, color=['lightblue', 'lightcoral'])
    ax1.set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π', fontsize=14, fontweight='bold')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π')
    
    for i, bar in enumerate(bars1):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 5,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    # –¢–µ–º–ø —Ä–æ—Å—Ç–∞
    delta = ((stats_5oct['with_salary'] - stats_26sep['with_salary']) / stats_26sep['with_salary']) * 100
    arrow = '‚Üë' if delta > 0 else '‚Üì' if delta < 0 else '‚Üí'
    color = 'green' if delta > 0 else 'red' if delta < 0 else 'gray'
    
    mid_x = (bars1[0].get_x() + bars1[0].get_width() + bars1[1].get_x()) / 2
    max_y = max(values) + 15
    
    ax1.text(mid_x, max_y, f'{arrow} {delta:+.1f}%', 
            ha='center', va='bottom', fontweight='bold', fontsize=12, color=color)
    
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    values2 = [stats_26sep['mean_salary'], stats_5oct['mean_salary']]
    bars2 = ax2.bar(dates, values2, color=['lightgreen', 'orange'])
    ax2.set_title('üí∞ –°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã', fontsize=14, fontweight='bold')
    ax2.set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, ‚ÇΩ')
    
    for i, bar in enumerate(bars2):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 5000,
                f'{height:,.0f} ‚ÇΩ', ha='center', va='bottom', fontweight='bold')
    
    # –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç
    delta2 = ((stats_5oct['mean_salary'] - stats_26sep['mean_salary']) / stats_26sep['mean_salary']) * 100
    arrow2 = '‚Üë' if delta2 > 0 else '‚Üì' if delta2 < 0 else '‚Üí'
    color2 = 'green' if delta2 > 0 else 'red' if delta2 < 0 else 'gray'
    
    mid_x2 = (bars2[0].get_x() + bars2[0].get_width() + bars2[1].get_x()) / 2
    max_y2 = max(values2) + 15000
    
    ax2.text(mid_x2, max_y2, f'{arrow2} {delta2:+.1f}%', 
            ha='center', va='bottom', fontweight='bold', fontsize=12, color=color2)
    
    ax2.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –¢–æ–ø-5 –∫–æ–º–ø–∞–Ω–∏–π –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
    if len(df_5oct) > 0:
        df_5oct_clean = categorize_roles(df_5oct)
        top_companies = df_5oct_clean['–ö–æ–º–ø–∞–Ω–∏—è'].value_counts().head(5)
        
        bars3 = ax3.barh(range(len(top_companies)), top_companies.values, color='lightcoral')
        ax3.set_yticks(range(len(top_companies)))
        ax3.set_yticklabels(top_companies.index)
        ax3.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π')
        ax3.set_title('üè¢ –¢–æ–ø-5 –∫–æ–º–ø–∞–Ω–∏–π (5 –æ–∫—Ç—è–±—Ä—è)', fontsize=14, fontweight='bold')
        
        for i, bar in enumerate(bars3):
            width = bar.get_width()
            ax3.text(width + 0.1, bar.get_y() + bar.get_height()/2,
                    f'{int(width)}', ha='left', va='center', fontweight='bold')
    
    ax3.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
    if len(df_5oct) > 0:
        df_5oct_clean = categorize_roles(df_5oct)
        df_with_salary = df_5oct_clean.dropna(subset=['salary_avg'])
        
        ax4.hist(df_with_salary['salary_avg'], bins=15, color='skyblue', edgecolor='navy', alpha=0.7)
        ax4.set_title('üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç (5 –æ–∫—Ç—è–±—Ä—è)', fontsize=14, fontweight='bold')
        ax4.set_xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, ‚ÇΩ')
        ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mean_salary = np.mean(df_with_salary['salary_avg'])
        median_salary = np.median(df_with_salary['salary_avg'])
        ax4.axvline(mean_salary, color='red', linestyle='--', linewidth=2, label=f'–°—Ä–µ–¥–Ω—è—è: {mean_salary:,.0f} ‚ÇΩ')
        ax4.axvline(median_salary, color='orange', linestyle='--', linewidth=2, label=f'–ú–µ–¥–∏–∞–Ω–∞: {median_salary:,.0f} ‚ÇΩ')
        ax4.legend()
    
    ax4.grid(True, alpha=0.3)
    
    plt.suptitle('üìà –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢ –ü–û –†–´–ù–ö–£ –¢–†–£–î–ê –í–õ–ê–î–ò–í–û–°–¢–û–ö–ê\n26 —Å–µ–Ω—Ç—è–±—Ä—è vs 5 –æ–∫—Ç—è–±—Ä—è 2025', 
                 fontsize=16, fontweight='bold')
    plt.tight_layout()
    plt.savefig(report_dir / 'summary_chart.png', dpi=300, bbox_inches='tight')
    plt.close()
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω: summary_chart.png")

def load_data_by_date():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º"""
    data_26sep = []
    data_5oct = []
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞ 26 —Å–µ–Ω—Ç—è–±—Ä—è
    sep_dir = Path("data/2025-09-26")
    if sep_dir.exists():
        sep_files = list(sep_dir.glob("*.csv"))
        for csv_file in sep_files:
            try:
                df = pd.read_csv(csv_file, sep=';', encoding='utf-8-sig')
                data_26sep.append(df)
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
    oct_dir = Path("data/2025-10-05")
    if oct_dir.exists():
        oct_files = list(oct_dir.glob("*.csv"))
        for csv_file in oct_files:
            try:
                df = pd.read_csv(csv_file, sep=';', encoding='utf-8-sig')
                data_5oct.append(df)
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    df_26sep = pd.concat(data_26sep, ignore_index=True) if data_26sep else pd.DataFrame()
    df_5oct = pd.concat(data_5oct, ignore_index=True) if data_5oct else pd.DataFrame()
    
    return df_26sep, df_5oct

def clean_salary_data(df, date_name):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö"""
    if len(df) == 0:
        return df
    
    def parse_salary(salary_text):
        if pd.isna(salary_text) or salary_text == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            return None, None
        
        salary_str = str(salary_text).replace(" ", "").replace(",", "").lower()
        
        range_match = re.search(r'(\d+)‚Äì(\d+)', salary_str)
        if range_match:
            from_salary = int(range_match.group(1))
            to_salary = int(range_match.group(2))
            return from_salary, to_salary
        
        from_match = re.search(r'–æ—Ç(\d+)', salary_str)
        if from_match:
            from_salary = int(from_match.group(1))
            return from_salary, None
        
        to_match = re.search(r'–¥–æ(\d+)', salary_str)
        if to_match:
            to_salary = int(to_match.group(1))
            return None, to_salary
        
        return None, None
    
    salary_data = df['–ó–∞—Ä–ø–ª–∞—Ç–∞'].apply(parse_salary)
    df['salary_from'] = salary_data.apply(lambda x: x[0] if x[0] is not None else np.nan)
    df['salary_to'] = salary_data.apply(lambda x: x[1] if x[1] is not None else np.nan)
    
    df['salary_avg'] = np.where(
        df['salary_to'].notna() & df['salary_from'].notna(),
        (df['salary_from'] + df['salary_to']) / 2,
        np.where(
            df['salary_from'].notna(),
            df['salary_from'],
            df['salary_to']
        )
    )
    
    df = df.dropna(subset=['salary_avg'])
    return df

def categorize_roles(df):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–æ–ª–µ–π"""
    if len(df) == 0:
        return df
    
    def get_role_category(title):
        if pd.isna(title):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        title_lower = title.lower()
        
        sales_keywords = ["–ø—Ä–æ–¥–∞–∂", "sales", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–¥–∞–∂"]
        if any(keyword in title_lower for keyword in sales_keywords):
            return "–ü—Ä–æ–¥–∞–∂–∏"
        
        procurement_keywords = ["–∑–∞–∫—É–ø", "–∑–∞–∫—É–ø–∫", "–∑–∞–∫—É–ø—â–∏–∫", "—Å–Ω–∞–±–∂–µ–Ω"]
        if any(keyword in title_lower for keyword in procurement_keywords):
            return "–ó–∞–∫—É–ø–∫–∏"
        
        project_keywords = ["–ø—Ä–æ–µ–∫—Ç", "project", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç"]
        if any(keyword in title_lower for keyword in project_keywords):
            return "–ü—Ä–æ–µ–∫—Ç—ã"
        
        management_keywords = ["–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–¥–∏—Ä–µ–∫—Ç–æ—Ä"]
        if any(keyword in title_lower for keyword in management_keywords):
            return "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"
        
        return "–î—Ä—É–≥–æ–µ"
    
    df['role_category'] = df['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'].apply(get_role_category)
    return df

def get_stats(df, date_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—Ç—ã"""
    if len(df) == 0:
        return {
            'date': date_name,
            'total_vacancies': 0,
            'with_salary': 0,
            'unique_companies': 0,
            'mean_salary': 0,
            'median_salary': 0
        }
    
    salaries = df['salary_avg'].dropna()
    return {
        'date': date_name,
        'total_vacancies': len(df),
        'with_salary': len(salaries),
        'unique_companies': df['–ö–æ–º–ø–∞–Ω–∏—è'].nunique(),
        'mean_salary': np.mean(salaries),
        'median_salary': np.median(salaries)
    }

def create_excel_with_charts(report_dir):
    """–°–æ–∑–¥–∞—ë—Ç Excel —Ñ–∞–π–ª —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    print("üìã –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏...")
    
    # –°–æ–∑–¥–∞—ë–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
    wb = openpyxl.Workbook()
    
    # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏—Å—Ç
    wb.remove(wb.active)
    
    # –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    ws_data = wb.create_sheet("üìä –î–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_26sep, df_5oct = load_data_by_date()
    df_26sep = clean_salary_data(df_26sep, "26 —Å–µ–Ω—Ç—è–±—Ä—è")
    df_5oct = clean_salary_data(df_5oct, "5 –æ–∫—Ç—è–±—Ä—è")
    
    stats_26sep = get_stats(df_26sep, "26 —Å–µ–Ω—Ç—è–±—Ä—è")
    stats_5oct = get_stats(df_5oct, "5 –æ–∫—Ç—è–±—Ä—è")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ws_data['A1'] = "üìà –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢ –ü–û –†–´–ù–ö–£ –¢–†–£–î–ê –í–õ–ê–î–ò–í–û–°–¢–û–ö–ê"
    ws_data['A1'].font = Font(size=16, bold=True)
    ws_data.merge_cells('A1:D1')
    
    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    ws_data['A2'] = f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    ws_data['A2'].font = Font(size=12, italic=True)
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    ws_data['A4'] = "üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
    ws_data['A4'].font = Font(size=14, bold=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    headers = ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '26 —Å–µ–Ω—Ç—è–±—Ä—è', '5 –æ–∫—Ç—è–±—Ä—è', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ']
    for i, header in enumerate(headers, 1):
        cell = ws_data.cell(row=6, column=i, value=header)
        cell.font = Font(bold=True)
        cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
    
    # –î–∞–Ω–Ω—ã–µ
    data_rows = [
        ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π', stats_26sep['with_salary'], stats_5oct['with_salary']],
        ['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π', stats_26sep['unique_companies'], stats_5oct['unique_companies']],
        ['–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞', f"{stats_26sep['mean_salary']:,.0f} ‚ÇΩ", f"{stats_5oct['mean_salary']:,.0f} ‚ÇΩ"],
        ['–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', f"{stats_26sep['median_salary']:,.0f} ‚ÇΩ", f"{stats_5oct['median_salary']:,.0f} ‚ÇΩ"]
    ]
    
    for i, row_data in enumerate(data_rows, 7):
        for j, value in enumerate(row_data, 1):
            ws_data.cell(row=i, column=j, value=value)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        if i <= 8:  # –î–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
            old_val = row_data[1]
            new_val = row_data[2]
            if old_val > 0:
                change_pct = ((new_val - old_val) / old_val) * 100
                arrow = '‚Üë' if change_pct > 0 else '‚Üì' if change_pct < 0 else '‚Üí'
                ws_data.cell(row=i, column=4, value=f"{arrow} {change_pct:+.1f}%")
            else:
                ws_data.cell(row=i, column=4, value="‚Äî")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    ws_data.column_dimensions['A'].width = 30
    ws_data.column_dimensions['B'].width = 20
    ws_data.column_dimensions['C'].width = 20
    ws_data.column_dimensions['D'].width = 15
    
    # –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    ws_charts = wb.create_sheet("üìä –ì—Ä–∞—Ñ–∏–∫–∏")
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart_path = report_dir / 'summary_chart.png'
    if chart_path.exists():
        img = ExcelImage(chart_path)
        img.width = 800
        img.height = 600
        ws_charts.add_image(img, 'A1')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–∏—Å—Ç–∞
        ws_charts['A12'] = "üìà –°–≤–æ–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞"
        ws_charts['A12'].font = Font(size=14, bold=True)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        ws_charts['A13'] = "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 1: –î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π"
        ws_charts['A14'] = "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 2: –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∑–∞—Ä–ø–ª–∞—Ç"
        ws_charts['A15'] = "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 3: –¢–æ–ø-5 –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π (5 –æ–∫—Ç—è–±—Ä—è)"
        ws_charts['A16'] = "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç (5 –æ–∫—Ç—è–±—Ä—è)"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    excel_file = report_dir / 'automated_report.xlsx'
    wb.save(excel_file)
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {excel_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –°–û–ó–î–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–¢–ß–Å–¢–ê")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–∞
    report_dir = Path("report_automated")
    report_dir.mkdir(exist_ok=True)
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {report_dir.absolute()}")
    
    try:
        # 1. –°–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        create_summary_chart(report_dir)
        
        # 2. –°–æ–∑–¥–∞—ë–º Excel —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        create_excel_with_charts(report_dir)
        
        print("\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢ –°–û–ó–î–ê–ù!")
        print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {report_dir.absolute()}")
        print("\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("  ‚Ä¢ summary_chart.png - –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
        print("  ‚Ä¢ automated_report.xlsx - Excel –æ—Ç—á—ë—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()

