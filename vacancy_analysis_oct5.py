#!/usr/bin/env python3
"""
üîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–ê–ö–ê–ù–°–ò–ô –í–õ–ê–î–ò–í–û–°–¢–û–ö–ê –ó–ê 5 –û–ö–¢–Ø–ë–†–Ø 2025
–ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è (–±–µ–∑ –¥—É–±–ª–µ–π –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import re
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

def setup_report_folder():
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è"""
    report_dir = Path("report_oct5")
    report_dir.mkdir(exist_ok=True)
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è: {report_dir.absolute()}")
    return report_dir

def load_oct5_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è"""
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è 2025...")
    
    data_dir = Path("data/2025-10-05")
    csv_files = list(data_dir.glob("*.csv"))
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è: {len(csv_files)}")
    
    all_data = []
    for csv_file in csv_files:
        print(f"  üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º: {csv_file.name}")
        try:
            df = pd.read_csv(csv_file, sep=';', encoding='utf-8-sig')
            all_data.append(df)
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {csv_file}: {e}")
    
    if not all_data:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è!")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
    combined_df = pd.concat(all_data, ignore_index=True)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(combined_df)} –∑–∞–ø–∏—Å–µ–π –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è")
    
    return combined_df

def clean_salary_data(df):
    """–û—á–∏—â–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö"""
    print("üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö...")
    
    def parse_salary(salary_text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if pd.isna(salary_text) or salary_text == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            return None, None
        
        salary_str = str(salary_text).replace(" ", "").replace(",", "").lower()
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç
        range_match = re.search(r'(\d+)‚Äì(\d+)', salary_str)
        if range_match:
            from_salary = int(range_match.group(1))
            to_salary = int(range_match.group(2))
            return from_salary, to_salary
        
        # "–æ—Ç X"
        from_match = re.search(r'–æ—Ç(\d+)', salary_str)
        if from_match:
            from_salary = int(from_match.group(1))
            return from_salary, None
        
        # "–¥–æ X"
        to_match = re.search(r'–¥–æ(\d+)', salary_str)
        if to_match:
            to_salary = int(to_match.group(1))
            return None, to_salary
        
        return None, None
    
    # –ü–∞—Ä—Å–∏–º –∑–∞—Ä–ø–ª–∞—Ç—ã
    salary_data = df['–ó–∞—Ä–ø–ª–∞—Ç–∞'].apply(parse_salary)
    df['salary_from'] = salary_data.apply(lambda x: x[0] if x[0] is not None else np.nan)
    df['salary_to'] = salary_data.apply(lambda x: x[1] if x[1] is not None else np.nan)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É
    df['salary_avg'] = np.where(
        df['salary_to'].notna() & df['salary_from'].notna(),
        (df['salary_from'] + df['salary_to']) / 2,
        np.where(
            df['salary_from'].notna(),
            df['salary_from'],
            df['salary_to']
        )
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã
    initial_count = len(df)
    df = df.dropna(subset=['salary_avg'])
    final_count = len(df)
    
    print(f"  üìä –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: {initial_count}")
    print(f"  üìä –° –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {final_count}")
    print(f"  üìä –£–¥–∞–ª–µ–Ω–æ –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã: {initial_count - final_count}")
    
    return df

def categorize_roles(df):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–æ–ª–µ–π"""
    print("üè∑Ô∏è –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–æ–ª–µ–π...")
    
    def get_role_category(title):
        if pd.isna(title):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        title_lower = title.lower()
        
        # –ü—Ä–æ–¥–∞–∂–∏
        sales_keywords = ["–ø—Ä–æ–¥–∞–∂", "sales", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–¥–∞–∂"]
        if any(keyword in title_lower for keyword in sales_keywords):
            return "–ü—Ä–æ–¥–∞–∂–∏"
        
        # –ó–∞–∫—É–ø–∫–∏
        procurement_keywords = ["–∑–∞–∫—É–ø", "–∑–∞–∫—É–ø–∫", "–∑–∞–∫—É–ø—â–∏–∫", "—Å–Ω–∞–±–∂–µ–Ω"]
        if any(keyword in title_lower for keyword in procurement_keywords):
            return "–ó–∞–∫—É–ø–∫–∏"
        
        # –ü—Ä–æ–µ–∫—Ç—ã
        project_keywords = ["–ø—Ä–æ–µ–∫—Ç", "project", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç"]
        if any(keyword in title_lower for keyword in project_keywords):
            return "–ü—Ä–æ–µ–∫—Ç—ã"
        
        # –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        management_keywords = ["–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–¥–∏—Ä–µ–∫—Ç–æ—Ä"]
        if any(keyword in title_lower for keyword in management_keywords):
            return "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"
        
        return "–î—Ä—É–≥–æ–µ"
    
    df['role_category'] = df['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'].apply(get_role_category)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    role_counts = df['role_category'].value_counts()
    print("  üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–æ–ª–µ–π –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è:")
    for role, count in role_counts.items():
        print(f"    ‚Ä¢ {role}: {count} –≤–∞–∫–∞–Ω—Å–∏–π")
    
    return df

def calculate_detailed_statistics(df):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è"""
    print("üìä –í—ã—á–∏—Å–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è...")
    
    salaries = df['salary_avg'].dropna()
    
    stats = {
        'date': '2025-10-05',
        'total_vacancies': len(df),
        'with_salary': len(salaries),
        'mean_salary': np.mean(salaries),
        'median_salary': np.median(salaries),
        'std_salary': np.std(salaries),
        'min_salary': np.min(salaries),
        'max_salary': np.max(salaries),
        'q25_salary': np.percentile(salaries, 25),
        'q75_salary': np.percentile(salaries, 75),
        'unique_companies': df['–ö–æ–º–ø–∞–Ω–∏—è'].nunique()
    }
    
    print("  üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è:")
    print(f"    ‚Ä¢ –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats['total_vacancies']}")
    print(f"    ‚Ä¢ –° –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {stats['with_salary']}")
    print(f"    ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {stats['unique_companies']}")
    print(f"    ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {stats['mean_salary']:,.0f} ‚ÇΩ")
    print(f"    ‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {stats['median_salary']:,.0f} ‚ÇΩ")
    print(f"    ‚Ä¢ –†–∞–∑–±—Ä–æ—Å (œÉ): {stats['std_salary']:,.0f} ‚ÇΩ")
    print(f"    ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {stats['min_salary']:,.0f} ‚ÇΩ")
    print(f"    ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {stats['max_salary']:,.0f} ‚ÇΩ")
    print(f"    ‚Ä¢ 25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {stats['q25_salary']:,.0f} ‚ÇΩ")
    print(f"    ‚Ä¢ 75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {stats['q75_salary']:,.0f} ‚ÇΩ")
    
    return stats

def create_oct5_visualizations(df, report_dir):
    """–°–æ–∑–¥–∞—ë—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è 5 –æ–∫—Ç—è–±—Ä—è"""
    print("üìä –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è...")
    
    df_with_salary = df.dropna(subset=['salary_avg'])
    print(f"  üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(df_with_salary)} –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π")
    
    # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
    plt.figure(figsize=(12, 7))
    plt.hist(df_with_salary['salary_avg'], bins=25, color='lightblue', edgecolor='navy', alpha=0.7)
    plt.title('üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ\n5 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ (–¥–∞–Ω–Ω—ã–µ –∑–∞ 3-5 –æ–∫—Ç—è–±—Ä—è)', fontsize=16, fontweight='bold')
    plt.xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, ‚ÇΩ', fontsize=12)
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', fontsize=12)
    plt.grid(True, alpha=0.3)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    mean_salary = np.mean(df_with_salary['salary_avg'])
    median_salary = np.median(df_with_salary['salary_avg'])
    plt.axvline(mean_salary, color='red', linestyle='--', linewidth=2, label=f'–°—Ä–µ–¥–Ω—è—è: {mean_salary:,.0f} ‚ÇΩ')
    plt.axvline(median_salary, color='orange', linestyle='--', linewidth=2, label=f'–ú–µ–¥–∏–∞–Ω–∞: {median_salary:,.0f} ‚ÇΩ')
    plt.legend(fontsize=10)
    
    plt.tight_layout()
    plt.savefig(report_dir / 'oct5_salary_distribution.png', dpi=300, bbox_inches='tight')
    plt.close()
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω: oct5_salary_distribution.png")
    
    # 2. –¢–æ–ø-15 –∫–æ–º–ø–∞–Ω–∏–π –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
    top_companies = df_with_salary['–ö–æ–º–ø–∞–Ω–∏—è'].value_counts().head(15)
    
    plt.figure(figsize=(14, 10))
    bars = plt.barh(range(len(top_companies)), top_companies.values, color='lightcoral')
    plt.yticks(range(len(top_companies)), top_companies.index)
    plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π', fontsize=12)
    plt.title('üè¢ –¢–æ–ø-15 –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π\n5 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ (–¥–∞–Ω–Ω—ã–µ –∑–∞ 3-5 –æ–∫—Ç—è–±—Ä—è)', fontsize=16, fontweight='bold')
    plt.grid(True, alpha=0.3)
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
    for i, bar in enumerate(bars):
        width = bar.get_width()
        plt.text(width + 0.1, bar.get_y() + bar.get_height()/2,
                f'{int(width)}', ha='left', va='center', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig(report_dir / 'oct5_top_companies.png', dpi=300, bbox_inches='tight')
    plt.close()
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω: oct5_top_companies.png")
    
    # 3. –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–æ–ª–µ–π
    role_salaries = df_with_salary.groupby('role_category')['salary_avg'].agg(['mean', 'count']).sort_values('mean', ascending=False)
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
    
    # –°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    bars1 = ax1.bar(role_salaries.index, role_salaries['mean'], color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'])
    ax1.set_title('üí∞ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n5 –æ–∫—Ç—è–±—Ä—è 2025 (–¥–∞–Ω–Ω—ã–µ –∑–∞ 3-5 –æ–∫—Ç—è–±—Ä—è)', fontsize=14, fontweight='bold')
    ax1.set_ylabel('–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞, ‚ÇΩ', fontsize=12)
    ax1.tick_params(axis='x', rotation=45)
    ax1.grid(True, alpha=0.3)
    
    for bar in bars1:
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 5000,
                f'{height:,.0f} ‚ÇΩ', ha='center', va='bottom', fontweight='bold', fontsize=9)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
    bars2 = ax2.bar(role_salaries.index, role_salaries['count'], color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'])
    ax2.set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n5 –æ–∫—Ç—è–±—Ä—è 2025 (–¥–∞–Ω–Ω—ã–µ –∑–∞ 3-5 –æ–∫—Ç—è–±—Ä—è)', fontsize=14, fontweight='bold')
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', fontsize=12)
    ax2.tick_params(axis='x', rotation=45)
    ax2.grid(True, alpha=0.3)
    
    for bar in bars2:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold', fontsize=9)
    
    plt.tight_layout()
    plt.savefig(report_dir / 'oct5_salary_by_role.png', dpi=300, bbox_inches='tight')
    plt.close()
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω: oct5_salary_by_role.png")

def create_oct5_summary_report(df, stats, report_dir):
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è"""
    print("üìã –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è...")
    
    excel_file = report_dir / 'oct5_detailed_report.xlsx'
    df_with_salary = df.dropna(subset=['salary_avg'])
    
    with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary_data = {
            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': ['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', '–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π', '–° –∑–∞—Ä–ø–ª–∞—Ç–æ–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π',
                          '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', 
                          '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–†–∞–∑–±—Ä–æ—Å (œÉ)', '25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å', '75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [stats['date'], stats['total_vacancies'], stats['with_salary'], stats['unique_companies'],
                        f"{stats['mean_salary']:,.0f} ‚ÇΩ", f"{stats['median_salary']:,.0f} ‚ÇΩ",
                        f"{stats['min_salary']:,.0f} ‚ÇΩ", f"{stats['max_salary']:,.0f} ‚ÇΩ",
                        f"{stats['std_salary']:,.0f} ‚ÇΩ", f"{stats['q25_salary']:,.0f} ‚ÇΩ",
                        f"{stats['q75_salary']:,.0f} ‚ÇΩ"]
        }
        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 5 –æ–∫—Ç—è–±—Ä—è', index=False)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
        role_stats = df_with_salary.groupby('role_category')['salary_avg'].agg([
            'count', 'mean', 'median', 'min', 'max', 'std'
        ]).round(0)
        role_stats.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω—è—è', '–ú–µ–¥–∏–∞–Ω–∞', '–ú–∏–Ω–∏–º—É–º', '–ú–∞–∫—Å–∏–º—É–º', '–†–∞–∑–±—Ä–æ—Å']
        role_stats.to_excel(writer, sheet_name='–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–æ–ª–µ–π')
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        company_stats = df_with_salary.groupby('–ö–æ–º–ø–∞–Ω–∏—è').agg({
            'salary_avg': ['count', 'mean', 'median'],
            '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏': lambda x: ', '.join(x.unique()[:3])  # –ü–µ—Ä–≤—ã–µ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è
        }).round(0)
        company_stats.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π']
        company_stats = company_stats.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', ascending=False)
        company_stats.to_excel(writer, sheet_name='–ü–æ –∫–æ–º–ø–∞–Ω–∏—è–º (–¥–µ—Ç–∞–ª—å–Ω–æ)')
        
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
        df_with_salary.to_excel(writer, sheet_name='–í—Å–µ –¥–∞–Ω–Ω—ã–µ 5 –æ–∫—Ç—è–±—Ä—è', index=False)
    
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {excel_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è"""
    print("üîç –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–ê–ö–ê–ù–°–ò–ô –í–õ–ê–î–ò–í–û–°–¢–û–ö–ê –ó–ê 5 –û–ö–¢–Ø–ë–†–Ø 2025")
    print("=" * 70)
    
    try:
        # 1. –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
        report_dir = setup_report_folder()
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
        df = load_oct5_data()
        
        # 3. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = clean_salary_data(df)
        
        # 4. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–∏
        df = categorize_roles(df)
        
        # 5. –í—ã—á–∏—Å–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = calculate_detailed_statistics(df)
        
        # 6. –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        create_oct5_visualizations(df, report_dir)
        
        # 7. –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        create_oct5_summary_report(df, stats, report_dir)
        
        print("\nüéâ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ó–ê 5 –û–ö–¢–Ø–ë–†–Ø –ó–ê–í–ï–†–®–Å–ù!")
        print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {report_dir.absolute()}")
        print("\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("  ‚Ä¢ oct5_salary_distribution.png - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")
        print("  ‚Ä¢ oct5_top_companies.png - –¢–æ–ø-15 –∫–æ–º–ø–∞–Ω–∏–π")
        print("  ‚Ä¢ oct5_salary_by_role.png - –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ —Ä–æ–ª—è–º")
        print("  ‚Ä¢ oct5_detailed_report.xlsx - –î–µ—Ç–∞–ª—å–Ω—ã–π Excel –æ—Ç—á—ë—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()
