#!/usr/bin/env python3
"""
üìà –ê–ù–ê–õ–ò–ó –î–ò–ù–ê–ú–ò–ö–ò –†–´–ù–ö–ê –¢–†–£–î–ê –í–õ–ê–î–ò–í–û–°–¢–û–ö–ê
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 26 —Å–µ–Ω—Ç—è–±—Ä—è vs 5 –æ–∫—Ç—è–±—Ä—è 2025
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import re
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False

def setup_report_folder():
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –¥–∏–Ω–∞–º–∏–∫–∏"""
    report_dir = Path("report_dynamics")
    report_dir.mkdir(exist_ok=True)
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –¥–∏–Ω–∞–º–∏–∫–∏: {report_dir.absolute()}")
    return report_dir

def load_data_by_date():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º...")
    
    data_26sep = []
    data_5oct = []
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞ 26 —Å–µ–Ω—Ç—è–±—Ä—è
    sep_dir = Path("data/2025-09-26")
    if sep_dir.exists():
        sep_files = list(sep_dir.glob("*.csv"))
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞ 26 —Å–µ–Ω—Ç—è–±—Ä—è: {len(sep_files)}")
        
        for csv_file in sep_files:
            print(f"  üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º: {csv_file.name}")
            try:
                df = pd.read_csv(csv_file, sep=';', encoding='utf-8-sig')
                data_26sep.append(df)
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
    oct_dir = Path("data/2025-10-05")
    if oct_dir.exists():
        oct_files = list(oct_dir.glob("*.csv"))
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è: {len(oct_files)}")
        
        for csv_file in oct_files:
            print(f"  üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º: {csv_file.name}")
            try:
                df = pd.read_csv(csv_file, sep=';', encoding='utf-8-sig')
                data_5oct.append(df)
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
    df_26sep = pd.concat(data_26sep, ignore_index=True) if data_26sep else pd.DataFrame()
    df_5oct = pd.concat(data_5oct, ignore_index=True) if data_5oct else pd.DataFrame()
    
    print(f"‚úÖ 26 —Å–µ–Ω—Ç—è–±—Ä—è: {len(df_26sep)} –∑–∞–ø–∏—Å–µ–π")
    print(f"‚úÖ 5 –æ–∫—Ç—è–±—Ä—è: {len(df_5oct)} –∑–∞–ø–∏—Å–µ–π")
    
    return df_26sep, df_5oct

def clean_salary_data(df, date_name):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö"""
    print(f"üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {date_name}...")
    
    if len(df) == 0:
        return df
    
    def parse_salary(salary_text):
        if pd.isna(salary_text) or salary_text == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            return None, None
        
        salary_str = str(salary_text).replace(" ", "").replace(",", "").lower()
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç
        range_match = re.search(r'(\d+)‚Äì(\d+)', salary_str)
        if range_match:
            from_salary = int(range_match.group(1))
            to_salary = int(range_match.group(2))
            return from_salary, to_salary
        
        # "–æ—Ç X"
        from_match = re.search(r'–æ—Ç(\d+)', salary_str)
        if from_match:
            from_salary = int(from_match.group(1))
            return from_salary, None
        
        # "–¥–æ X"
        to_match = re.search(r'–¥–æ(\d+)', salary_str)
        if to_match:
            to_salary = int(to_match.group(1))
            return None, to_salary
        
        return None, None
    
    # –ü–∞—Ä—Å–∏–º –∑–∞—Ä–ø–ª–∞—Ç—ã
    salary_data = df['–ó–∞—Ä–ø–ª–∞—Ç–∞'].apply(parse_salary)
    df['salary_from'] = salary_data.apply(lambda x: x[0] if x[0] is not None else np.nan)
    df['salary_to'] = salary_data.apply(lambda x: x[1] if x[1] is not None else np.nan)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É
    df['salary_avg'] = np.where(
        df['salary_to'].notna() & df['salary_from'].notna(),
        (df['salary_from'] + df['salary_to']) / 2,
        np.where(
            df['salary_from'].notna(),
            df['salary_from'],
            df['salary_to']
        )
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã
    initial_count = len(df)
    df = df.dropna(subset=['salary_avg'])
    final_count = len(df)
    
    print(f"  üìä {date_name}: {initial_count} ‚Üí {final_count} (—Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π)")
    
    return df

def categorize_roles(df):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–æ–ª–µ–π"""
    if len(df) == 0:
        return df
    
    def get_role_category(title):
        if pd.isna(title):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        title_lower = title.lower()
        
        # –ü—Ä–æ–¥–∞–∂–∏
        sales_keywords = ["–ø—Ä–æ–¥–∞–∂", "sales", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–¥–∞–∂"]
        if any(keyword in title_lower for keyword in sales_keywords):
            return "–ü—Ä–æ–¥–∞–∂–∏"
        
        # –ó–∞–∫—É–ø–∫–∏
        procurement_keywords = ["–∑–∞–∫—É–ø", "–∑–∞–∫—É–ø–∫", "–∑–∞–∫—É–ø—â–∏–∫", "—Å–Ω–∞–±–∂–µ–Ω"]
        if any(keyword in title_lower for keyword in procurement_keywords):
            return "–ó–∞–∫—É–ø–∫–∏"
        
        # –ü—Ä–æ–µ–∫—Ç—ã
        project_keywords = ["–ø—Ä–æ–µ–∫—Ç", "project", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç"]
        if any(keyword in title_lower for keyword in project_keywords):
            return "–ü—Ä–æ–µ–∫—Ç—ã"
        
        # –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        management_keywords = ["–º–µ–Ω–µ–¥–∂–µ—Ä", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–¥–∏—Ä–µ–∫—Ç–æ—Ä"]
        if any(keyword in title_lower for keyword in management_keywords):
            return "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"
        
        return "–î—Ä—É–≥–æ–µ"
    
    df['role_category'] = df['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'].apply(get_role_category)
    return df

def calculate_comparison_stats(df_26sep, df_5oct):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("üìä –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    def get_stats(df, date_name):
        if len(df) == 0:
            return {
                'date': date_name,
                'total_vacancies': 0,
                'with_salary': 0,
                'unique_companies': 0,
                'mean_salary': 0,
                'median_salary': 0,
                'std_salary': 0,
                'min_salary': 0,
                'max_salary': 0
            }
        
        salaries = df['salary_avg'].dropna()
        return {
            'date': date_name,
            'total_vacancies': len(df),
            'with_salary': len(salaries),
            'unique_companies': df['–ö–æ–º–ø–∞–Ω–∏—è'].nunique(),
            'mean_salary': np.mean(salaries),
            'median_salary': np.median(salaries),
            'std_salary': np.std(salaries),
            'min_salary': np.min(salaries),
            'max_salary': np.max(salaries)
        }
    
    stats_26sep = get_stats(df_26sep, "26 —Å–µ–Ω—Ç—è–±—Ä—è")
    stats_5oct = get_stats(df_5oct, "5 –æ–∫—Ç—è–±—Ä—è")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    changes = {}
    for key in ['total_vacancies', 'with_salary', 'unique_companies', 'mean_salary', 'median_salary']:
        if key in stats_26sep and key in stats_5oct:
            old_val = stats_26sep[key]
            new_val = stats_5oct[key]
            if old_val != 0:
                change_pct = ((new_val - old_val) / old_val) * 100
                changes[key] = {
                    'old': old_val,
                    'new': new_val,
                    'change': new_val - old_val,
                    'change_pct': change_pct
                }
    
    print("  üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"    üìÖ 26 —Å–µ–Ω—Ç—è–±—Ä—è: {stats_26sep['with_salary']} –≤–∞–∫–∞–Ω—Å–∏–π, —Å—Ä–µ–¥–Ω—è—è {stats_26sep['mean_salary']:,.0f} ‚ÇΩ")
    print(f"    üìÖ 5 –æ–∫—Ç—è–±—Ä—è: {stats_5oct['with_salary']} –≤–∞–∫–∞–Ω—Å–∏–π, —Å—Ä–µ–¥–Ω—è—è {stats_5oct['mean_salary']:,.0f} ‚ÇΩ")
    
    if 'with_salary' in changes:
        change = changes['with_salary']
        print(f"    üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {change['change']:+d} ({change['change_pct']:+.1f}%)")
    
    if 'mean_salary' in changes:
        change = changes['mean_salary']
        print(f"    üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã: {change['change']:+,.0f} ‚ÇΩ ({change['change_pct']:+.1f}%)")
    
    return stats_26sep, stats_5oct, changes

def create_dynamics_visualizations(df_26sep, df_5oct, stats_26sep, stats_5oct, changes, report_dir):
    """–°–æ–∑–¥–∞—ë—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏"""
    print("üìä –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏...")
    
    # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    metrics = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π', '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π']
    sep_values = [stats_26sep['with_salary'], stats_26sep['mean_salary'], 
                 stats_26sep['median_salary'], stats_26sep['unique_companies']]
    oct_values = [stats_5oct['with_salary'], stats_5oct['mean_salary'], 
                 stats_5oct['median_salary'], stats_5oct['unique_companies']]
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
    dates = ['26 —Å–µ–Ω—Ç—è–±—Ä—è', '5 –æ–∫—Ç—è–±—Ä—è']
    values = [stats_26sep['with_salary'], stats_5oct['with_salary']]
    bars1 = ax1.bar(dates, values, color=['lightblue', 'lightcoral'])
    ax1.set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π', fontsize=14, fontweight='bold')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars1):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 5,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ –º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏
    if 'with_salary' in changes:
        change = changes['with_salary']
        delta = change['change_pct']
        arrow = '‚Üë' if delta > 0 else '‚Üì' if delta < 0 else '‚Üí'
        color = 'green' if delta > 0 else 'red' if delta < 0 else 'gray'
        
        # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏ (–º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏)
        mid_x = (bars1[0].get_x() + bars1[0].get_width() + bars1[1].get_x()) / 2
        max_y = max(values) + 15
        
        ax1.text(mid_x, max_y, f'{arrow} {delta:+.1f}%', 
                ha='center', va='bottom', fontweight='bold', fontsize=12, color=color)
    
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    values2 = [stats_26sep['mean_salary'], stats_5oct['mean_salary']]
    bars2 = ax2.bar(dates, values2, color=['lightgreen', 'orange'])
    ax2.set_title('üí∞ –°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã', fontsize=14, fontweight='bold')
    ax2.set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, ‚ÇΩ')
    
    for i, bar in enumerate(bars2):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 5000,
                f'{height:,.0f} ‚ÇΩ', ha='center', va='bottom', fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç
    if 'mean_salary' in changes:
        change = changes['mean_salary']
        delta = change['change_pct']
        arrow = '‚Üë' if delta > 0 else '‚Üì' if delta < 0 else '‚Üí'
        color = 'green' if delta > 0 else 'red' if delta < 0 else 'gray'
        
        mid_x = (bars2[0].get_x() + bars2[0].get_width() + bars2[1].get_x()) / 2
        max_y = max(values2) + 15000
        
        ax2.text(mid_x, max_y, f'{arrow} {delta:+.1f}%', 
                ha='center', va='bottom', fontweight='bold', fontsize=12, color=color)
    
    ax2.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ú–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    values3 = [stats_26sep['median_salary'], stats_5oct['median_salary']]
    bars3 = ax3.bar(dates, values3, color=['purple', 'pink'])
    ax3.set_title('üìà –ú–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã', fontsize=14, fontweight='bold')
    ax3.set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞, ‚ÇΩ')
    
    for i, bar in enumerate(bars3):
        height = bar.get_height()
        ax3.text(bar.get_x() + bar.get_width()/2., height + 5000,
                f'{height:,.0f} ‚ÇΩ', ha='center', va='bottom', fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ –¥–ª—è –º–µ–¥–∏–∞–Ω–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç
    if 'median_salary' in changes:
        change = changes['median_salary']
        delta = change['change_pct']
        arrow = '‚Üë' if delta > 0 else '‚Üì' if delta < 0 else '‚Üí'
        color = 'green' if delta > 0 else 'red' if delta < 0 else 'gray'
        
        mid_x = (bars3[0].get_x() + bars3[0].get_width() + bars3[1].get_x()) / 2
        max_y = max(values3) + 15000
        
        ax3.text(mid_x, max_y, f'{arrow} {delta:+.1f}%', 
                ha='center', va='bottom', fontweight='bold', fontsize=12, color=color)
    
    ax3.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π
    values4 = [stats_26sep['unique_companies'], stats_5oct['unique_companies']]
    bars4 = ax4.bar(dates, values4, color=['brown', 'gray'])
    ax4.set_title('üè¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π', fontsize=14, fontweight='bold')
    ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π')
    
    for i, bar in enumerate(bars4):
        height = bar.get_height()
        ax4.text(bar.get_x() + bar.get_width()/2., height + 1,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø —Ä–æ—Å—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
    if 'unique_companies' in changes:
        change = changes['unique_companies']
        delta = change['change_pct']
        arrow = '‚Üë' if delta > 0 else '‚Üì' if delta < 0 else '‚Üí'
        color = 'green' if delta > 0 else 'red' if delta < 0 else 'gray'
        
        mid_x = (bars4[0].get_x() + bars4[0].get_width() + bars4[1].get_x()) / 2
        max_y = max(values4) + 3
        
        ax4.text(mid_x, max_y, f'{arrow} {delta:+.1f}%', 
                ha='center', va='bottom', fontweight='bold', fontsize=12, color=color)
    
    ax4.grid(True, alpha=0.3)
    
    plt.suptitle('üìà –î–ò–ù–ê–ú–ò–ö–ê –†–´–ù–ö–ê –¢–†–£–î–ê –í–õ–ê–î–ò–í–û–°–¢–û–ö–ê\n26 —Å–µ–Ω—Ç—è–±—Ä—è (–¥–∞–Ω–Ω—ã–µ –∑–∞ 24-26.09) vs 5 –æ–∫—Ç—è–±—Ä—è (–¥–∞–Ω–Ω—ã–µ –∑–∞ 3-5.10) 2025', 
                 fontsize=16, fontweight='bold')
    plt.tight_layout()
    plt.savefig(report_dir / 'dynamics_comparison.png', dpi=300, bbox_inches='tight')
    plt.close()
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω: dynamics_comparison.png")
    
    # 2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–æ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if len(df_26sep) > 0 and len(df_5oct) > 0:
        df_26sep_clean = categorize_roles(df_26sep)
        df_5oct_clean = categorize_roles(df_5oct)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ–±–µ–∏—Ö –¥–∞—Ç
        sep_roles = df_26sep_clean.groupby('role_category')['salary_avg'].agg(['count', 'mean']).fillna(0)
        oct_roles = df_5oct_clean.groupby('role_category')['salary_avg'].agg(['count', 'mean']).fillna(0)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_categories = set(sep_roles.index) | set(oct_roles.index)
        
        sep_counts = [sep_roles.loc[cat, 'count'] if cat in sep_roles.index else 0 for cat in all_categories]
        oct_counts = [oct_roles.loc[cat, 'count'] if cat in oct_roles.index else 0 for cat in all_categories]
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        x = np.arange(len(all_categories))
        width = 0.35
        
        fig, ax = plt.subplots(figsize=(12, 6))
        bars1 = ax.bar(x - width/2, sep_counts, width, label='26 —Å–µ–Ω—Ç—è–±—Ä—è', color='lightblue')
        bars2 = ax.bar(x + width/2, oct_counts, width, label='5 –æ–∫—Ç—è–±—Ä—è', color='lightcoral')
        
        ax.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–æ–ª–µ–π')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π')
        ax.set_title('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n26 —Å–µ–Ω—Ç—è–±—Ä—è (24-26.09) vs 5 –æ–∫—Ç—è–±—Ä—è (3-5.10) 2025', 
                    fontsize=14, fontweight='bold')
        ax.set_xticks(x)
        ax.set_xticklabels(all_categories)
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bars in [bars1, bars2]:
            for bar in bars:
                height = bar.get_height()
                if height > 0:
                    ax.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                           f'{int(height)}', ha='center', va='bottom', fontweight='bold', fontsize=9)
        
        plt.tight_layout()
        plt.savefig(report_dir / 'dynamics_by_roles.png', dpi=300, bbox_inches='tight')
        plt.close()
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: dynamics_by_roles.png")

def create_dynamics_report(df_26sep, df_5oct, stats_26sep, stats_5oct, changes, report_dir):
    """–°–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ"""
    print("üìã –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ...")
    
    excel_file = report_dir / 'dynamics_report.xlsx'
    
    with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = {
            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': ['–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π', '–° –∑–∞—Ä–ø–ª–∞—Ç–æ–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π', 
                          '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–†–∞–∑–±—Ä–æ—Å (œÉ)', 
                          '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'],
            '26 —Å–µ–Ω—Ç—è–±—Ä—è': [stats_26sep['total_vacancies'], stats_26sep['with_salary'], 
                           stats_26sep['unique_companies'], f"{stats_26sep['mean_salary']:,.0f} ‚ÇΩ",
                           f"{stats_26sep['median_salary']:,.0f} ‚ÇΩ", f"{stats_26sep['std_salary']:,.0f} ‚ÇΩ",
                           f"{stats_26sep['min_salary']:,.0f} ‚ÇΩ", f"{stats_26sep['max_salary']:,.0f} ‚ÇΩ"],
            '5 –æ–∫—Ç—è–±—Ä—è': [stats_5oct['total_vacancies'], stats_5oct['with_salary'], 
                         stats_5oct['unique_companies'], f"{stats_5oct['mean_salary']:,.0f} ‚ÇΩ",
                         f"{stats_5oct['median_salary']:,.0f} ‚ÇΩ", f"{stats_5oct['std_salary']:,.0f} ‚ÇΩ",
                         f"{stats_5oct['min_salary']:,.0f} ‚ÇΩ", f"{stats_5oct['max_salary']:,.0f} ‚ÇΩ"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        change_values = []
        for key in ['total_vacancies', 'with_salary', 'unique_companies', 'mean_salary', 'median_salary', 
                   'std_salary', 'min_salary', 'max_salary']:
            if key in changes:
                change = changes[key]
                change_values.append(f"{change['change']:+,.0f} ({change['change_pct']:+.1f}%)")
            else:
                change_values.append("‚Äî")
        
        comparison_data['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] = change_values
        comparison_df = pd.DataFrame(comparison_data)
        comparison_df.to_excel(writer, sheet_name='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π', index=False)
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞ 26 —Å–µ–Ω—Ç—è–±—Ä—è
        if len(df_26sep) > 0:
            df_26sep_clean = categorize_roles(df_26sep)
            df_26sep_clean.to_excel(writer, sheet_name='–î–∞–Ω–Ω—ã–µ 26 —Å–µ–Ω—Ç—è–±—Ä—è', index=False)
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞ 5 –æ–∫—Ç—è–±—Ä—è
        if len(df_5oct) > 0:
            df_5oct_clean = categorize_roles(df_5oct)
            df_5oct_clean.to_excel(writer, sheet_name='–î–∞–Ω–Ω—ã–µ 5 –æ–∫—Ç—è–±—Ä—è', index=False)
    
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {excel_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏"""
    print("üìà –ê–ù–ê–õ–ò–ó –î–ò–ù–ê–ú–ò–ö–ò –†–´–ù–ö–ê –¢–†–£–î–ê –í–õ–ê–î–ò–í–û–°–¢–û–ö–ê")
    print("26 —Å–µ–Ω—Ç—è–±—Ä—è vs 5 –æ–∫—Ç—è–±—Ä—è 2025")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
        report_dir = setup_report_folder()
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
        df_26sep, df_5oct = load_data_by_date()
        
        if len(df_26sep) == 0 and len(df_5oct) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
            return False
        
        # 3. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_26sep = clean_salary_data(df_26sep, "26 —Å–µ–Ω—Ç—è–±—Ä—è")
        df_5oct = clean_salary_data(df_5oct, "5 –æ–∫—Ç—è–±—Ä—è")
        
        # 4. –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_26sep, stats_5oct, changes = calculate_comparison_stats(df_26sep, df_5oct)
        
        # 5. –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏
        create_dynamics_visualizations(df_26sep, df_5oct, stats_26sep, stats_5oct, changes, report_dir)
        
        # 6. –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ
        create_dynamics_report(df_26sep, df_5oct, stats_26sep, stats_5oct, changes, report_dir)
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –î–ò–ù–ê–ú–ò–ö–ò –ó–ê–í–ï–†–®–Å–ù!")
        print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {report_dir.absolute()}")
        print("\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("  ‚Ä¢ dynamics_comparison.png - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        print("  ‚Ä¢ dynamics_by_roles.png - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–æ–ª–µ–π")
        print("  ‚Ä¢ dynamics_report.xlsx - –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()
