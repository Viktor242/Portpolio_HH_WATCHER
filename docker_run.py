#!/usr/bin/env python3
"""
üê≥ Docker Runner –¥–ª—è HH_Watcher
–£–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –≤ Docker
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ!")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}:")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stdout:
            print("STDOUT:", e.stdout)
        if e.stderr:
            print("STDERR:", e.stderr)
        return False

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker."""
    try:
        subprocess.run(["docker", "--version"], check=True, capture_output=True)
        subprocess.run(["docker-compose", "--version"], check=True, capture_output=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker –∏–ª–∏ Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop: https://www.docker.com/products/docker-desktop")
        return False

def build_image():
    """–°–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑."""
    return run_command("docker build -t hh-watcher .", "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞")

def run_full_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
    return run_command(
        "docker-compose up --build hh-watcher",
        "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–∞—Ä—Å–∏–Ω–≥ + –∞–Ω–∞–ª–∏–∑ + –æ—Ç—á—ë—Ç—ã)"
    )

def run_parsing_only():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥."""
    return run_command(
        "docker-compose up --build hh-parser",
        "–¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö"
    )

def run_analysis_only():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑."""
    return run_command(
        "docker-compose up --build hh-analyzer",
        "–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
    )

def run_specific_script(script_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤ Docker."""
    if not os.path.exists(script_name):
        print(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    cmd = f"docker run --rm -v {os.getcwd()}/data:/app/data -v {os.getcwd()}/report_oct5:/app/report_oct5 -v {os.getcwd()}/report_dynamics:/app/report_dynamics -v {os.getcwd()}/report_automated:/app/report_automated hh-watcher python {script_name}"
    return run_command(cmd, f"–ó–∞–ø—É—Å–∫ {script_name}")

def clean_docker():
    """–û—á–∏—â–∞–µ—Ç Docker —Ä–µ—Å—É—Ä—Å—ã."""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...")
    run_command("docker-compose down", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    run_command("docker system prune -f", "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")

def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø—Ü–∏–π."""
    print("\nüê≥ HH_Watcher Docker Runner")
    print("=" * 50)
    print("1. üî® –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑")
    print("2. üöÄ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–∞—Ä—Å–∏–Ω–≥ + –∞–Ω–∞–ª–∏–∑ + –æ—Ç—á—ë—Ç—ã)")
    print("3. üìä –¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö")
    print("4. üìà –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    print("5. üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
    print("6. üßπ –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã")
    print("7. ‚ùå –í—ã—Ö–æ–¥")
    print("=" * 50)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if not check_docker():
        return
    
    while True:
        show_menu()
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-7): ").strip()
        
        if choice == "1":
            build_image()
        elif choice == "2":
            run_full_analysis()
        elif choice == "3":
            run_parsing_only()
        elif choice == "4":
            run_analysis_only()
        elif choice == "5":
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:")
            scripts = [
                "sales_parser.py",
                "zakup_parser.py", 
                "vacancy_analysis_oct5.py",
                "vacancy_dynamics_comparison.py",
                "create_automated_report.py"
            ]
            for i, script in enumerate(scripts, 1):
                print(f"  {i}. {script}")
            
            try:
                script_choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ (1-5): "))
                if 1 <= script_choice <= 5:
                    run_specific_script(scripts[script_choice - 1])
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        elif choice == "6":
            clean_docker()
        elif choice == "7":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()

